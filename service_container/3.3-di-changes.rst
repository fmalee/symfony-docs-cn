Symfony 3.3 DI容器更改说明（自动装配，_defaults等）
===========================================================================

如果你看一下新的Symfony 3.3或更高版本的项目的 ``services.yaml`` 文件，你会发现一些大的变化：
``_defaults``、``autowiring``、``autoconfigure`` 等等。
这些功能旨在自动化配置并使开发更快，而不会牺牲可预测性，这非常重要！
另一个目标是使控制器和服务表现得更加一致。在Symfony 3.3中，控制器默认\ *是*\服务。

假设你已启用这些新功能，对应的文档已更新完成。
如果你是现有的Symfony用户，并希望了解这些更改背后的“内容”和“原因”，那么本文适合你！

所有更改都是可选的
------------------------

最重要的是，**你可以立即升级到Symfony 3.3**，而无需对你的应用进行任何更改。
Symfony具有 :doc:`严格的向后兼容性承诺 </contributing/code/bc>`，这意味着在次要版本之间升级始终是安全的。

所有新功能都是 **可选的**：它们默认情况下不启用，因此你需要动手更改配置文件以使用它们。

.. _`service-33-default_definition`:

新的默认services.yaml文件
----------------------------------

要了解这些更改，请查看新的默认 ``services.yaml`` 文件（这是Symfony 4中的文件）：

.. configuration-block::

    .. code-block:: yaml

        # config/services.yaml
        services:
            # 默认的服务配置在 *此* 文件
            _defaults:
                autowire: true      # 自动注入服务中的依赖
                autoconfigure: true # 自动将你的服务注册为命令、事件订阅器等等。
                public: false       # 允许通过删除未使用的服务来优化容器;
                                    # 这也意味着直接通过 $container->get() 从容器中获取服务将不起作用
                                    # 最好的做法是明确你的依赖关系。

            # 使 src/ 中的类可用作服务
            # 这会为每个类创建一个服务，其id是完全限定的类名：
            App\:
                resource: '../src/*'
                exclude: '../src/{Entity,Migrations,Tests}'

            # 控制器是单独导入的，以确保即使你不继承任何基本控制器类，也可以将服务作为动作参数注入
            App\Controller\:
                resource: '../src/Controller'
                tags: ['controller.service_arguments']

            # 需要显式配置时，可以添加更多服务定义
            # 最后的定义总是 *替换* 之前的定义

    .. code-block:: xml

        <!-- config/services.xml -->
        <?xml version="1.0" encoding="UTF-8" ?>
        <container xmlns="http://symfony.com/schema/dic/services"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://symfony.com/schema/dic/services
                http://symfony.com/schema/dic/services/services-1.0.xsd">

            <services>
                <defaults autowire="true" autoconfigure="true" public="false" />

                <prototype namespace="App\" resource="../src/*" exclude="../src/{Entity,Migrations,Tests}" />

                <prototype namespace="App\Controller\" resource="../src/Controller">
                    <tag name="controller.service_arguments" />
                </prototype>

                <!-- add more services, or override services that need manual wiring -->
            </services>
        </container>

这一小部分配置包含了Symfony中服务是如何配置的范例。

.. _`service-33-changes-automatic-registration`:

1) 服务自动加载
------------------------------------

.. seealso::

    阅读 :ref:`自动服务加载 <service-psr4-loader>` 文档。

第一个重大变化是服务 *不再* 需要逐个定义，这要归功于以下配置：

.. configuration-block::

    .. code-block:: yaml

        # config/services.yaml
        services:
            # ...

            # makes classes in src/ available to be used as services
            # this creates a service per class whose id is the fully-qualified class name
            App\:
                resource: '../src/*'
                exclude: '../src/{Entity,Migrations,Tests}'

    .. code-block:: xml

        <!-- config/services.xml -->
        <?xml version="1.0" encoding="UTF-8" ?>
        <container xmlns="http://symfony.com/schema/dic/services"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://symfony.com/schema/dic/services
                http://symfony.com/schema/dic/services/services-1.0.xsd">

            <services>
                <!-- ... -->

                <prototype namespace="App\" resource="../src/*" exclude="../src/{Entity,Migrations,Tests}" />
            </services>
        </container>

这意味着在 ``src/`` 中的每个类都 *可* 用作服务。
并且得益于在文件顶部的 ``_defaults`` 部分，所有这些服务都是 **自动装配** 和 **私有** （即 ``public: false``）。

服务ID等于类名（例如 ``App\Service\InvoiceGenerator``）。
这是你会注意到的Symfony 3.3中的另一个变化：我们建议你使用类名作为服务ID，除非你
:ref:`为同一个类提供多个服务 <services-explicitly-configure-wire-services>`。

    但容器如何知道我的服务的参数？

由于每个服务都是 :ref:`自动装配 <services-autowire>` 的，因此容器可以自动确定大多数参数。
但是，你始终可以重写服务并 :ref:`手动配置参数 <services-manually-wire-args>` 或其他任何有关你服务的特殊信息。

    但是等等，如果我的 ``src/`` 目录中有一些模型（非服务）类，这是不是意味着 *它们* 也将被注册为服务？这不是问题吗？

实际上，这 *不是* 问题。由于所有新服务都是 :ref:`私有 <container-public>` 的（感谢 ``_defaults``），
如果你的代码中 *没有* 使用任何服务，它们将自动从编译容器中删除。
这意味着无论是显式配置每个服务还是使用此方法一次性加载所有服务，容器中的服务数应该 *相同* 的。

    好的，但是我可以排除一些我 *知道* 不会包含服务的路径吗？

可以! ``exclude`` 键一个glob模式，可以用来设置你不希望被列为服务的 *黑名单* 路径。
但是，由于未使用的服务会自动从容器中删除，``exclude`` 因此并不重要。
最大的好处是容器不会 *跟踪* 这些路径，因此可能导致容器在 ``dev`` 环境中可以更少地重建。

2) 默认自动装配：使用类型约束代替服务ID
-------------------------------------------------------------

第二个重大变化是为你注册的所有服务启用自动装配（通过 ``_defaults``）。
这也意味着服务ID现在 *不那么* 重要了，“类型”（即类或接口名称）现在变得 *更加* 重要。

例如，在Symfony 3.3之前（现在仍允许），你可以使用以下配置将一个服务作为参数传递给另一个服务：

.. configuration-block::

    .. code-block:: yaml

        # config/services.yaml
        services:
            app.invoice_generator:
                class: App\Service\InvoiceGenerator

            app.invoice_mailer:
                class: App\Service\InvoiceMailer
                arguments:
                    - '@app.invoice_generator'

    .. code-block:: xml

        <!-- config/services.xml -->
        <?xml version="1.0" encoding="UTF-8" ?>
        <container xmlns="http://symfony.com/schema/dic/services"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://symfony.com/schema/dic/services
                http://symfony.com/schema/dic/services/services-1.0.xsd">

            <services>
                <service id="app.invoice_generator"
                    class="App\Service\InvoiceGenerator" />

                <service id="app.invoice_mailer"
                    class="App\Service\InvoiceMailer">

                    <argument type="service" id="app.invoice_generator" />
                </service>
            </services>
        </container>

    .. code-block:: php

        // config/services.php
        use App\Service\InvoiceGenerator;
        use App\Service\InvoiceMailer;
        use Symfony\Component\DependencyInjection\Reference;

        $container->register('app.invoice_generator', InvoiceGenerator::class);
        $container->register('app.invoice_mailer', InvoiceMailer::class)
            ->setArguments(array(new Reference('app.invoice_generator')));

要将 ``InvoiceGenerator`` 作为参数传递到 ``InvoiceMailer``，你需要将服务的 *id* 指定为参数：
``app.invoice_generator``。服务ID是你配置事物的主要方式。

但是在Symfony 3.3中，由于自动装配，你需要做的就是将  ``InvoiceGenerator`` 作为类型约束参数::

    // src/Service/InvoiceMailer.php
    // ...

    class InvoiceMailer
    {
        private $generator;

        public function __construct(InvoiceGenerator $generator)
        {
            $this->generator = $generator
        }

        // ...
    }

仅此而已！这两种服务都会 :ref:`自动注册 <service-33-changes-automatic-registration>` 并设置为自动装配。
没有 *任何* 配置，容器知道将自动注册的 ``App\Service\InvoiceGenerator`` 作为第一个参数传递。
正如你所看到的，类的 *类型* - ``App\Service\InvoiceGenerator`` - 是最重要的，而不是id。
你请求特定类型的 *实例*，容器会自动向你传递正确的服务。

    那不是那么神奇吗？它是如何知道准确的传递哪个服务给我？如果我有同一个实例的多个服务怎么办？

自动装配系统被设计为 *超级* 可预测性。它首先通过查找id与类型约束 *完全* 匹配的服务来工作。
这意味着你可以完全控制哪种类型约束映射到哪种服务。你甚至可以使用服务别名来获得更多控制权。
如果你有一个特定类型的多个服务，*你* 可以选择哪一个应该被用于自动装配。
有关自动装配逻辑的完整详细信息，请参阅 :ref:`autowiring-logic-explained`。

    但是，如果我有一个标量（例如字符串）参数怎么办？它是如何自动装配的？

如果你的参数 *不是* 对象，则无法自动装配。但那没关系！Symfony将为你提供一个明确的异常（在下一次刷新 *任何* 页面时），
告诉你哪个服务无法自动装配。要修复它，你可以 :ref:`仅仅手动配置那一个参数 <services-manually-wire-args>`。
这是自动装配的理念：仅配置你需要的部分。而大多数配置都是自动化。

    好的，但自动装配会使应用不稳定。如果你改变了一件事或犯了错误，可能会发生意想不到的事情。这不是问题吗？

Symfony始终首先重视稳定性、安全性和可预测性。自动装配的设计考虑到了这一点。具体来说：

* 如果装配 *任何* 参数到 *任何* 服务时出现问题，则在下一次刷新任何页面时都会抛出明确的异常，即使你不在该页面上使用该服务也是如此。
  这很 *健壮* ：它 *不* 可能在自动装配出错后，自己还没有意识到这一点

* 容器用很明确的方式确定传递哪一个服务：它查找ID与类型约束完全匹配的服务。
  它并没有通过扫描所有服务来寻找一个有类/接口的对象。

自动装配旨在实现无需魔法的 *自动化* 配置。

3) 控制器被注册为服务
-----------------------------------------

第三个重大变化是，在新的Symfony 3.3项目中，你的控制器既是 *服务*：

.. configuration-block::

    .. code-block:: yaml

        # config/services.yaml
        services:
            # ...

            # 控制器是单独导入的，以确保它们是共有的，并具有允许动作去类型约束服务的标签
            App\Controller\:
                resource: '../src/Controller'
                tags: ['controller.service_arguments']

    .. code-block:: xml

        <!-- config/services.xml -->
        <?xml version="1.0" encoding="UTF-8" ?>
        <container xmlns="http://symfony.com/schema/dic/services"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://symfony.com/schema/dic/services
                http://symfony.com/schema/dic/services/services-1.0.xsd">

            <services>
                <!-- ... -->

                <prototype namespace="App\Controller\" resource="../src/Controller">
                    <tag name="controller.service_arguments" />
                </prototype>
            </services>
        </container>

    .. code-block:: php

        // config/services.php

        // ...

        $definition->addTag('controller.service_arguments');
        $this->registerClasses($definition, 'App\\Controller\\', '../src/Controller/*');

但是，你甚至可能都没有注意到这一点。首先，你的控制器仍然 *可以* 继承相同的控制器基类（``AbstractController``）。
这意味着你可以访问与以前相同的所有快捷方式。
此外，``@Route`` 注释和路由中的 ``_controller`` 语法（如 ``App:Default:homepage``）会自动将控制器作为服务使用（只要它的服务ID匹配它的类名，在此例子中 *的确* 如此）。
更多详细信息，请参见 :doc:`/controller/service`。
你甚至可以创建 :ref:`可调用的控制器 <controller-service-invoke>`。

换句话说，一切都是一样的。你甚至可以将上述配置添加到现有项目中而不会出现任何问题：控制器的行为与以前相同。
但是现在你的控制器是服务，你可以像任何其他服务一样使用依赖注入和自动装配。

为了让生活更轻松，现在可以将控制器动作方法的参数自动装配，就像使用服务的构造函数一样。例如::

    use Psr\Log\LoggerInterface;

    class InvoiceController extends AbstractController
    {
        public function listInvoices(LoggerInterface $logger)
        {
            $logger->info('A new way to access services!');
        }
    }

这 *只能* 在控制器中实现，并且你的控制器服务必须标记为 ``controller.service_arguments`` 才可以。
我们的整个文档中都使用了这一新功能。

通常，新的最佳实践是使用普通的构造函数依赖注入（或控制器中的“动作”注入）
而不是通过 ``$this->get()`` 获取公有服务（尽管这仍然有效）。

.. _service_autoconfigure:

4) 使用自动配置自动标记
----------------------------------

第四个重大变化是 ``autoconfigure`` 键，它在 ``_defaults`` 键之下并被设置为 ``true``。
由于这个原因，容器将自动标记在此文件中注册的服务。
例如，假设你要创建事件订阅器。首先，你创建该类::

    // src/EventSubscriber/SetHeaderSusbcriber.php
    // ...

    use Symfony\Component\EventDispatcher\EventSubscriberInterface;
    use Symfony\Component\HttpKernel\Event\FilterResponseEvent;
    use Symfony\Component\HttpKernel\KernelEvents;

    class SetHeaderSusbcriber implements EventSubscriberInterface
    {
        public function onKernelResponse(FilterResponseEvent $event)
        {
            $event->getResponse()->headers->set('X-SYMFONY-3.3', 'Less config');
        }

        public static function getSubscribedEvents()
        {
            return [
                KernelEvents::RESPONSE => 'onKernelResponse'
            ];
        }
    }

很好！在Symfony 3.2或更低版本中，你现在需要在 ``services.yaml`` 中将其注册为服务并将其标记为
``kernel.event_subscriber``。
在Symfony 3.3中，你已经完成所有操作！该服务已经 :ref:`自动注册 <service-33-changes-automatic-registration>`。
得益于  ``autoconfigure``，Symfony依据该服务实现 ``EventSubscriberInterface`` 而自动进行标记。

    这听起来像魔术 - 它会 *自动标记* 我的服务？

在这个例子中，你已经创建了一个实现 ``EventSubscriberInterface`` 并将其注册为服务的类。
这足以让容器知道你希望将其用作事件订阅器：不需要更多配置。标签系统是它自己的，特定于Symfony的机制。
而你总是可以在 ``services.yaml`` 中将 ``autoconfigure`` 设置为 ``false``，或为特定服务的禁用它。

    这是不是意味着标签已经死了？这适用于所有标签吗？

自动配置 *并不* 适用所有的标签。许多标签都具有 *必需* 的属性，例如事件\ *监听器*\，你还需要在标签中指定事件名称和方法。
自动配置仅适用于没有任何必需标签属性的标签，当你阅读一个功能的文档时，它会告诉你是否需要标签。
你还可以阅读扩展类（例如 `FrameworkExtension for 3.3.0`_）以查看它自动配置的内容。

    如果我需要为标签添加优先级怎么办？

许多自动配置的标签具有可选的优先级。如果需要指定优先级（或任何其他可选标记属性），没问题！
:ref:`手动配置服务 <services-manually-wire-args>` 并添加标签。你的标签将优先于自动配置添加的标签。

5) 使用_instanceof自动配置
----------------------------------

而最后的重大变化是 ``_instanceof``。它充当默认定义模板（请参阅 `service-33-default_definition`_），
但仅适用于其类与已定义的类匹配的服务。

当许多服务共享一些无法从抽象定义继承的标签时，它会派上用场：

.. configuration-block::

    .. code-block:: yaml

        # config/services.yaml
        services:
            # ...

            _instanceof:
                App\Domain\LoaderInterface:
                    public: true
                    tags: ['app.domain_loader']

    .. code-block:: xml

        <!-- config/services.xml -->
        <?xml version="1.0" encoding="UTF-8" ?>
        <container xmlns="http://symfony.com/schema/dic/services"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://symfony.com/schema/dic/services
                http://symfony.com/schema/dic/services/services-1.0.xsd">

            <services>
                <!-- ... -->

                <instanceof id="App\Domain\LoaderInterface" public="true">
                    <tag name="app.domain_loader" />
                </instanceof>
            </services>
        </container>

性能怎么样
----------------------

Symfony是独一无二的，因为它有一个 *已编译* 容器。
这意味着使用任何这些功能都 *不会* 影响运行时性能。
这也是自动装配系统可以为你提供如此明确错误的原因。

但是，在 ``dev`` 环境会对性能产生一些影响。最重要的原因是，当你修改服务类时，你的容器可能会更频繁地重建。
这是因为无论何时向服务添加新参数，或者向应该自动配置的类添加接口，容器都需要重建。

在非常大的项目中，这可能是一个问题。如果是，你可以选择 *不* 使用自动装配。
如果你认为缓存重建系统在某些情况下可能可以更智能，请打开一个问题(open an issue)！

升级到新的Symfony 3.3配置
----------------------------------------------

准备升级现有项目了吗？很好！假设你具有以下配置：

.. code-block:: yaml

    # config/services.yaml
    services:
        app.github_notifier:
            class: App\Service\GitHubNotifier
            arguments:
                - '@app.api_client_github'

        markdown_transformer:
            class: App\Service\MarkdownTransformer

        app.api_client_github:
            class: App\Service\ApiClient
            arguments:
                - 'https://api.github.com'

        app.api_client_sl_connect:
            class: App\Service\ApiClient
            arguments:
                - 'https://connect.symfony.com/api'

这是可选的，但让我们逐步升级到新的Symfony 3.3配置， 而不会破坏我们的应用。

Step 1): 添加_defaults
~~~~~~~~~~~~~~~~~~~~~~~~~

首先添加一个附带 ``autowire`` 和 ``autoconfigure`` 的 ``_defaults`` 配置。

.. code-block:: diff

    # config/services.yaml
    services:
    +     _defaults:
    +         autowire: true
    +         autoconfigure: true

        # ...

此步骤尚未更改任何内容：你已经 *明确配* 置了所有服务。所以，``autowire`` 什么都不做。
你还已经标记了你的服务，因此 ``autoconfigure`` 也不会更改任何现有服务。

你现在还没有添加 ``public: false`` 。马上就要来了。

Step 2) 使用类服务id
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

现在，服务ID是机器名称 - 例如 ``app.github_notifier``。
要使用新的配置系统，你的服务ID应该是类名，除非你有多个相同服务的实例。

首先将服务ID更新为类名：

.. code-block:: diff

    # config/services.yaml
    services:
        # ...

    -     app.github_notifier:
    -         class: App\Service\GitHubNotifier
    +     App\Service\GitHubNotifier:
            arguments:
                - '@app.api_client_github'

    -     markdown_transformer:
    -         class: App\Service\MarkdownTransformer
    +     App\Service\MarkdownTransformer: ~

        # keep these ids because there are multiple instances per class
        app.api_client_github:
            # ...
        app.api_client_sl_connect:
            # ...

.. caution::

    与全局PHP类关联的服务（即不使用PHP命名空间）必须维护该 ``class`` 参数。
    例如，当使用旧的Twig类
    （例如，``Twig_Extensions_Extension_Intl`` 而不是 ``Twig\Extensions\IntlExtension``）时，
    你无法重新定义服务为 ``Twig_Extensions_Extension_Intl: ~``，你必须保留原始的 ``class`` 参数。

.. caution::

    如果服务由 :doc:`compiler pass </service_container/compiler_passes>` 处理，
    你可能会遇到“你已请求不存在的服务”错误。
    要摆脱这种情况，请确保使用Compiler Pass 使用 ``findDefinition()`` 代替 ``getDefinition()``。
    后者在查找服务时不会考虑别名。此外，始终建议使用 ``has()`` 函数检查定义是否存在。

.. note::

    如果你摆脱了弃用(deprecations)并使控制器从 ``AbstractController`` 继承而不是 ``Controller``，
    你可以跳过此步骤的其余部分，因为 ``AbstractController`` 它不提供可以从中获取服务的容器。
    需要按照 :ref:`本文第5步 <step-5>` 中的说明注入所有服务。

但是，这一变化将破坏我们的应用！旧服务ID（例如 ``app.github_notifier``）不再存在。
解决此问题的最简单方法是找到所有旧服务ID并将其更新为新的类ID：
从 ``app.github_notifier`` 变更到 ``App\Service\GitHubNotifier``。

在大型项目中，有一种更好的方法：创建将旧id映射到新id的旧别名。
创建一个新 ``legacy_aliases.yml`` 文件：

.. code-block:: yaml

    # app/config/legacy_aliases.yml
    services:
        _defaults:
            public: true
        # aliases so that the old service ids can still be accessed
        # remove these if/when you are not fetching these directly
        # from the container via $container->get()
        app.github_notifier: '@App\Service\GitHubNotifier'
        markdown_transformer: '@App\Service\MarkdownTransformer'

然后在 ``services.yaml`` 顶部导入此文件：

.. code-block:: diff

    # config/services.yaml
    + imports:
    +     - { resource: legacy_aliases.yml }

    # ...

仅此而已！旧的服务ID仍然有效。稍后，（请参阅下面的清理步骤），你可以从你的应用中删除这些。

Step 3) 使服务私有
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

现在你已准备好将所有服务默认为私有：

.. code-block:: diff

    # config/services.yaml
    # ...

    services:
         _defaults:
             autowire: true
             autoconfigure: true
    +          public: false

由于这个原因，任何在此文件中创建的服务都无法直接从容器中获取。
但是，由于旧服务ID在单独文件（``legacy_aliases.yml``）中的是别名，因此它们 *仍然* 是公有的。这可以确保应用继续工作。

如果你没有改变你的一些服务的ID（因为相同的类有多个实例），你可能需要将它们设置为公有：

.. code-block:: diff

    # config/services.yaml
    # ...

    services:
        # ...

        app.api_client_github:
            # ...

    +         # remove this if/when you are not fetching this
    +         # directly from the container via $container->get()
    +         public: true

        app.api_client_sl_connect:
            # ...
    +         public: true

这是为了保证应用不会中断。如果你没有直接从容器中获取这些服务，则不需要这样做。
在一分钟之内，你会清理它。

Step 4) 自动注册服务
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

你现在已准备好自动注册在 ``src/`` （和你拥有的任何其他目录/Bundle）中的所有服务：

.. code-block:: diff

    # config/services.yaml

    services:
        _defaults:
            # ...

    +     App\:
    +         resource: '../src/*'
    +         exclude: '../src/{Entity,Migrations,Tests}'
    +
    +     App\Controller\:
    +         resource: '../src/Controller'
    +         tags: ['controller.service_arguments']

        # ...

仅此而已！实际上，你已经重写并重新配置了你正在使用的所有服务
（``App\Service\GitHubNotifier`` 和 ``App\Service\MarkdownTransformer``）。
但现在，你不需要再手动注册未来的服务。

如果你拥有同一类的多个服务，则会再次出现一个额外的复杂情况：

.. code-block:: diff

    # config/services.yaml

    services:
        # ...

    +     # alias ApiClient to one of our services below
    +     # app.api_client_github will be used to autowire ApiClient type-hints
    +     App\Service\ApiClient: '@app.api_client_github'

        app.api_client_github:
            # ...
        app.api_client_sl_connect:
            # ...

这可以保证如果你尝试自动装配一个 ``ApiClient`` 实例，``app.api_client_github`` 将会被使用。
如果你 *没有* 这个配置，自动注册功能将尝试注册第三个 ``ApiClient`` 服务并将其用于自动装配
（这将失败，因为该类具有非自动装配参数）。

.. _step-5:

Step 5) 清理！
~~~~~~~~~~~~~~~~

为了确保你的应用不会中断，你做了一些额外的工作。现在是时候清理了！
首先，更新你的应用以 *不* 使用旧的服务ID（既 ``legacy_aliases.yml``）。
这意味着需要更新任何服务的参数（例如由 ``@app.github_notifier`` 到 ``@App\Service\GitHubNotifier``），
并更新你的代码不直接从容器获取服务。例如：

.. code-block:: diff

    -     public function index()
    +     public function index(GitHubNotifier $gitHubNotifier, MarkdownTransformer $markdownTransformer)
        {
    -         // the old way of fetching services
    -         $githubNotifier = $this->container->get('app.github_notifier');
    -         $markdownTransformer = $this->container->get('markdown_transformer');

            // ...
        }

执行此操作后，你可以删除 ``legacy_aliases.yml`` 并删除其导入。
你应该对你公开的任何服务执行相同的操作，例如 ``app.api_client_github`` 和 ``app.api_client_sl_connect``。
一旦你没有直接从容器中获取这些，你就可以删除 ``public: true`` 标志：

.. code-block:: diff

    # config/services.yaml
    services:
        # ...

        app.api_client_github:
            # ...
    -         public: true

        app.api_client_sl_connect:
            # ...
    -         public: true

最后，你可以选择删除 ``services.yaml`` 中可以自动装配其参数的任何服务。最终配置如下所示：

.. code-block:: yaml

    services:
        _defaults:
            autowire: true
            autoconfigure: true
            public: false

        App\:
            resource: '../src/*'
            exclude: '../src/{Entity,Migrations,Tests}'

        App\Controller\:
            resource: '../src/Controller'
            tags: ['controller.service_arguments']

        App\Service\GitHubNotifier:
            # this could be deleted, or I can keep being explicit
            arguments:
                - '@app.api_client_github'

        # alias ApiClient to one of our services below
        # app.api_client_github will be used to autowire ApiClient type-hints
        App\Service\ApiClient: '@app.api_client_github'

        # keep these ids because there are multiple instances per class
        app.api_client_github:
            class: App\Service\ApiClient
            arguments:
                - 'https://api.github.com'

        app.api_client_sl_connect:
            class: App\Service\ApiClient
            arguments:
                - 'https://connect.symfony.com/api'

你现在可以利用未来的新功能了。

.. _`FrameworkExtension for 3.3.0`: https://github.com/symfony/symfony/blob/7938fdeceb03cc1df277a249cf3da70f0b50eb98/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php#L247-L284
